---
title: rspec-expectations
order: 2
filter:
  - erb
  - markdown
---

## rspec-expectations

rspec-expectations defines <code>should</code> and <code>should_not</code> on
every object in the system.  Here is a list of all the built-in matchers
provided by rspec-expectations.  See
[RSpec::Expectations](http://rdoc.info/gems/rspec-expectations/RSpec/Expectations)
and [RSpec::Matchers](http://rdoc.info/gems/rspec-expectations/RSpec/Matchers)
for more information.

## built in matchers

### Object eqivalence

<% coderay lang='ruby' do %>
actual.should eq(expected)  # passes if actual == expected
actual.should == expected   # passes if actual == expected
actual.should eql(expected) # passes if actual.eql?(expected)
<% end %>

### Object identity

<% coderay lang='ruby' do %>
actual.should equal(expected) # passes if actual.equal?(expected)
actual.should be(expected) # passes if actual.equal?(expected)
<% end %>


### Comparisons

<% coderay lang='ruby' do %>
actual.should be >  expected
actual.should be >= expected
actual.should be <= expected
actual.should be <  expected
actual.should =~ /expression/
actual.should match(/expression/)
actual.should be_within(delta).of(expected)
<% end %>

### Types/classes

<% coderay lang='ruby' do %>
actual.should be_instance_of(expected)
actual.should be_kind_of(expected)
<% end %>

### Truthiness

<% coderay lang='ruby' do %>
actual.should be_true  # passes if actual is truthy (not nil or false)
actual.should be_false # passes if actual is falsy (nil or false)
actual.should be_nil   # passes if actual is nil
<% end %>

### Expecting errors

<% coderay lang='ruby' do %>
expect { ... }.to raise_error
expect { ... }.to raise_error(ErrorClass)
expect { ... }.to raise_error("message")
expect { ... }.to raise_error(ErrorClass, "message")
<% end %>

### Expecting throws

<% coderay lang='ruby' do %>
expect { ... }.to throw_symbol
expect { ... }.to throw_symbol(:symbol)
expect { ... }.to throw_symbol(:symbol, 'value')
<% end %>

### Predicate matchers

<% coderay lang='ruby' do %>
actual.should be_xxx         # passes if actual.xxx?
actual.should have_xxx(:arg) # passes if actual.has_xxx?(:arg)

# examples

[].should be_empty # passes because [].empty? returns true
{ :a => 1 }.should have_key(:a) # passes because the hash has the key :a
<% end %>

### Collection membership

<% coderay lang='ruby' do %>
actual.should include(expected)

# examples

[1,2,3].should include(1)
[1,2,3].should include(1, 2)
{:a => 'b'}.should include(:a => 'b')
"this string".should include("is str")
<% end %>

### Ranges (Ruby >= 1.9)

<% coderay lang='ruby' do %>
(1..10).should cover(3)
<% end %>
