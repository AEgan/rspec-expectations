--- 
title: rspec-rails
order: 4
filter:
  - erb
  - markdown
--- 

## <%= @page.title %>

The rspec-rails gem extends rspec-core and Rails' built-in testing framework to
support full-stack, application-level specs (request specs), as well is
isolated specs for models, views, controllers, helpers, mailers, and routing.

## Install

First, add rspec-rails to your Gemfile:

<% coderay do -%>
gem "rspec-rails", :group => [:development, :test]
<% end -%>

It needs to be in the `:development` group to expose the generators and rake
tasks to your development environment. Otherwise you'd have to type
`RAILS_ENV=test rails generate ....`, and who wants that?

Now install the bundle and the rspec files and directories:

<% coderay :shell do -%>
bundle install
rails generate rspec:install
<% end -%>

## Directory structure

rspec-rails uses a directory naming convention based on the component being
spec'd:

<% coderay do -%>
project
  |
  +--app
  |
  +--...
  |
  +--spec
      |
      +-- spec_helper.rb
      |
      +-- controllers
      |
      +-- helpers
      |
      +-- mailers
      |
      +-- models
      |
      +-- requests
      |
      +-- routing
      |
      +-- support
      |
      +-- views
<% end -%>

Model, view, controller, helper, mailer, and routing specs each focus on the
named component.

Request specs wrap Rails' integration tests. These go through the full stack,
including the router. By themselves, or combined with
[Capybara](https://github.com/jnicklas/capybara), request specs are a great
starting point for outside-in development if you're not using another tool like
[Cucumber](http://cukes.info) or [Fitnesse](http://fitnesse.org).  The name
"request specs" came out of the Merb project. We use that instead of
"integration" or "acceptance" due to the lack of consensus on what those names
mean.

The generated `spec_helper.rb` file requires any `.rb` files in the "support"
directory, which is the conventional container for helpers, custom matchers,
etc. 

## Fixtures

While most of the Rails world uses factories these days, you _can_ still use
Rails fixtures the same way you would use them in the Rails testing framework.
First, declare their location in `spec_helper.rb`:

<% coderay do -%>
RSpec.configure do |config|
  config.fixture_path = "#{::Rails.root}/spec/fixtures"
end
<% end -%>

Now declare which fixtures you want to use in each example group:

<% coderay do -%>
describe WidgetsController do
  fixtures :widgets
end
<% end -%>

You can also declare them globally in `spec_helper.rb`:

<% coderay do -%>
RSpec.configure do |config|
  config.global_fixtures = [:things, :widgets]
end
<% end -%>

## Generators

When you include rspec-rails in the `:development` group in your `Gemfile`,
rspec-rails registers itself with Rails as the generator for tests. The only
rspec-specific generator you need to know about is `rspec:install`, mentioned
above. Otherwise, just run the rails generators and you'll get specs for free:

<% coderay do -%>
rails generate model thing name:string
      invoke  active_record
      create    db/migrate/20111013140413_create_things.rb
      create    app/models/thing.rb
      invoke    rspec
      create      spec/models/thing_spec.rb
<% end -%>

## Running specs

### using the `rspec` command

<% coderay do -%>
rspec path/to/directory/with/specs
rspec path/to/individual_spec.rb
rspec glob/pattern/to*/*_be_matched*
<% end -%>

### using `rake`

When you include rspec-rails in the `:development` group in your `Gemfile`,
rspec-rails registers several rake tasks

<% coderay do -%>
$ rake --tasks spec
rake spec              # Run all specs in spec directory (excluding plugin specs)
rake spec:controllers  # Run the code examples in spec/controllers
rake spec:helpers      # Run the code examples in spec/helpers
rake spec:lib          # Run the code examples in spec/lib
rake spec:mailers      # Run the code examples in spec/mailers
rake spec:models       # Run the code examples in spec/models
rake spec:rcov         # Run all specs with rcov
rake spec:requests     # Run the code examples in spec/requests
rake spec:routing      # Run the code examples in spec/routing
rake spec:views        # Run the code examples in spec/views
<% end -%>
